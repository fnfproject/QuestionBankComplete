@page "/add"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Internal
@inject NavigationManager navigate;
@inject QuestionBankUI.Trainer.Services.QuestionUIService service;
@inject QuestionBankUI.Trainer.Services.PracticePaperUIService _service;
@inject HttpClient Http;
@using Microsoft.AspNetCore.Components.Forms
@using QuestionBankDll.Trainer.Models
@inject IJSRuntime JsRuntime
<br />
<div class="container">
    <br />

    <div>
        <h1 style="text-align:center">Add New Question(s)</h1>
        <br />
        <label><h4>Select an option:</h4></label>
        <select class="p-2" @onchange="HandleSelectChange">
            <option value="">Select an option</option>
            <br />
            <option value="Single">Upload Single Question</option>
            <option value="Bulk">Upload Bulk Questions</option>
            <option value="Practice">Upload Practice Questions</option>
        </select>
        <br />
        <br />
        <br />
        @if (selectedOption == "Single")
        {
            <div class="form-group row">

                <label class="col-sm-2 col-form-label">Subject : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.Subject class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Topic : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.Topic class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Difficulty Level: </label>

                <div class="col-sm-10">

                    <select class="form-control p-2" @bind=singleQuestion.DifficultyLevel>
                        <option value="Select Option">Select an Option</option>
                        <option value="Easy">Easy</option>
                        <option value="Mediun">Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                    <br />
                </div>


                <label class="col-sm-2 col-form-label">Question Text : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.QuestionText class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Option A : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.OptionA class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Option B : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.OptionB class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Option C : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.OptionC class="form-control" />
                    <br />
                </div>
                <label class="col-sm-2 col-form-label">Option D : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.OptionD class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Correct Answer : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.CorrectAnswer class="form-control" />
                    <br />
                </div>

                <label class="col-sm-2 col-form-label">Explaination : </label>
                <div class="col-sm-10">
                    <InputText @bind-Value=singleQuestion.Explaination class="form-control" />
                </div>

            </div>
            <button type="submit" class="btn btn-outline-success m-3 p-3" @onclick="SubmitSingleQuestion">Submit</button>
            <button type="submit" class="btn btn-outline-danger p-3" @onclick="Cancel">Cancel</button>

        }
        else if (selectedOption == "Bulk")
        {
            <div>
                <h4>Upload Bulk Questions</h4><br />
                 <div class="form-group form-inline">
                    <label class="mr-2" for="sampleDownload">Download Sample File Format :</label><br />

                    <a href="/files/SampleExcelFormat.xlsx" class="btn btn-outline-info p-1">Download Sample</a>

                </div> 
                <br />
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label" for="fileupload">Upload Document :</label>
                    <div class="col-sm-10">
                        <InputFile OnChange="HandleFileUploaded" id="fileupload" class="form-control" />
                    </div>

                </div>

                <button type="submit" class="btn btn-outline-success m-3 p-2 " @onclick="Submit">Submit</button>
                <button type="submit" class="btn btn-outline-danger p-2" @onclick="Cancel">Cancel</button>
            </div>
        }
        else if (selectedOption == "Practice")
        {
            <div class="form-group row">

              

                <label class="col-sm-2 col-form-label" for="fileupload">Upload Document:</label>
                <div class="col-sm-10">
                    <InputFile OnChange="HandleFileSelected" id="fileupload" class="form-control" />
                    <br />
                    <button type="submit" class="btn btn-outline-success m-3 p-2 ">Submit</button>
                    <button type="submit" class="btn btn-outline-danger p-2" @onclick="Cancel">Cancel</button>
                </div>
            </div>



        }
    </div>


</div>
<br />



@code {
    private PracticePaper practicePaper = new PracticePaper();
    private string selectedOption = "";
    private string testName = "";
    private string _pdfFolderPath = "C:\\Users\\6147960\\Desktop\\Git\\QuestionBankComplete\\TrainerBackendUI\\TrainerBackendUI\\TrainerBackendUI\\pdf\\";

    private string fileName = "";
    private IBrowserFile selectedFile;
    private string errorMessage;
    private bool isSuccess = false;
    //public IFormFile file;
    private QuestionBankDll.Trainer.Dtos.QuestionDtos singleQuestion = new QuestionBankDll.Trainer.Dtos.QuestionDtos();
    private void HandleSelectChange(ChangeEventArgs e)
    {
        selectedOption = (e.Value as string)?.Trim();
    }

    // private void HandleFileChange(ChangeEventArgs e)
    // {
    //     uploadedFile = (e.Value as IBrowserFile);
    // }
    // private void HandleFileChange(InputFileChangeEventArgs e)
    // {
    //     uploadedFile = e.File;
    // }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                using var content = new MultipartFormDataContent();
                using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); // Max size 10 MB

                var streamContent = new StreamContent(stream);

                streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(streamContent, "file", file.Name);

                await Http.PostAsync("AddPracticePaper", content);
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to upload document: {ex.InnerException}";
        }
    }

    private async Task HandleFileUploaded(InputFileChangeEventArgs e)
    {
        try
        {
            var selectedFile = e.File;
            if (selectedFile != null)
            {
                // using var content = new MultipartFormDataContent();
                // using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
                // var streamContent = new StreamContent(stream);

                // streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                // content.Add(streamContent, "file", file.Name);
                // //var response = await Http.PostAsync("AddBulkQuestions", content);

                var memoryStream = new MemoryStream();
                await selectedFile.OpenReadStream().CopyToAsync(memoryStream);

                var formFile = new FormFile(
                    baseStream: memoryStream,
                    baseStreamOffset: 0,
                    length: memoryStream.Length,
                    name: selectedFile.Name,
                    fileName: selectedFile.Name
                )
                    {
                        Headers = new HeaderDictionary(),
                        ContentType = selectedFile.ContentType
                    };
                memoryStream.Position = 0;
                // await service.AddQuestionInBulkAsync(formFile);

                using (var content = new MultipartFormDataContent())
                {
                    var fileContent = new StreamContent(formFile.OpenReadStream());
                    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(formFile.ContentType);
                    content.Add(fileContent, "file", formFile.FileName);

                    var response = await Http.PostAsync("AddBulkQuestions", content);

                }

            }
            else
            {
                throw new Exception("Some other error");
            }


        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    public class Response
    {
        public string FilePath { get; set; }
    }



    private async void SubmitSingleQuestion()
    {
        if (!IsCorrectAnswerValid())
        {
            // Display an alert if the correct answer is not valid
            await JsRuntime.InvokeVoidAsync("alert", "The correct answer doesn't match any of the four options provided.");
            return;
        }

        try
        {
            //singleQuestion.CreatedBy = 1;
            // await Http.PostAsJsonAsync("AddSingleQuestion",singleQuestion);

            service.AddQuestionAsync(singleQuestion);
            navigate.NavigateTo("/");
        }
        catch (Exception ex)
        {
            throw ex.InnerException;
        }


    }


    private bool IsCorrectAnswerValid()
    {
        // Check if CorrectAnswer matches any of the options
        return singleQuestion.CorrectAnswer == singleQuestion.OptionA ||
               singleQuestion.CorrectAnswer == singleQuestion.OptionB ||
               singleQuestion.CorrectAnswer == singleQuestion.OptionC ||
               singleQuestion.CorrectAnswer == singleQuestion.OptionD;
    }




    private void Cancel()
    {
        navigate.NavigateTo("/");
    }

    private void Submit()
    {
        navigate.NavigateTo("/");
    }

}

