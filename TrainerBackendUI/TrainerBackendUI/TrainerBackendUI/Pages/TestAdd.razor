@page "/testAdd/selectedQuestionIds={selectedQuestionIds}"

@using System.Text.Json
@inject NavigationManager navigator
@using QuestionBankDll.Trainer.Models
@if (jsonQuestionIds != null)
{
    <pre class="d-inline-block">@jsonQuestionIds</pre>
}

<div>
    <br />

    <div class="container">
        <h2 style="text-align:center">Enter Test Details</h2>
        <div class="form-group row">

            <label class="col-sm-2 col-form-label">Enter Test Name : </label>
            <div class="col-sm-10">
                <input type="text" @bind="test.TestName" class="form-control" />
                <br />
            </div>
            <label class="col-sm-2 col-form-label">Test Max Marks : </label>
            <div class="col-sm-10">
                <input type="number" @bind="questionCount" class="form-control" disabled/>
                <br />
            </div>
            <label class="col-sm-2 col-form-label">Number Of Questions : </label>
            <div class="col-sm-10">
                <input type="number" @bind="questionCount" class="form-control" disabled/>
                <br />
            </div>
            <label class="col-sm-2 col-form-label">Start Time : </label>
            <div class="col-sm-10">
                <input type="datetime-local" @bind="test.StartTime" class="form-control" />
                <br />
            </div>
            <label class="col-sm-2 col-form-label">Expiry Time : </label>
            <div class="col-sm-10">
                <input type="datetime-local" @bind="test.ExpiryTime" class="form-control" />
                <br />
            </div>

        </div>
        <button type="button" @onclick="CreateTest" class="btn btn-outline-secondary">Create Test</button>
    </div>
    <br />

</div>


@code {
    [Parameter]
    public string selectedQuestionIds { get; set; }

    private QuestionBankDll.Trainer.Models.Test test = new QuestionBankDll.Trainer.Models.Test();

    private List<int> questionIds;
    private string jsonQuestionIds;
    private int questionCount;
    private bool isLoading = true;
    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        try
        {
            if (!string.IsNullOrEmpty(selectedQuestionIds))
            {
                questionIds = selectedQuestionIds.Split(',').Select(int.Parse).ToList();
                questionCount = questionIds.Count();
                jsonQuestionIds = JsonSerializer.Serialize(questionIds, new JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
            }

        }
        finally
        {
            isLoading = false;
        }
    }
    private void CreateTest()
    {
        if (questionIds != null && questionIds.Any())
        {
            var ids = string.Join(",", questionIds);
            navigator.NavigateTo($"/test/{test.TestName}/selectedQuestionIds={ids}");
        }

    }

}