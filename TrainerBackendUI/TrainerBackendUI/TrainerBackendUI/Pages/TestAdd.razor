@page "/testAdd"
@page "/testAdd/{selectedQuestionIds}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@using QuestionBankDll.Trainer.Dtos
@using System.Net.Http.Json

<h3>Generate Test</h3>



@if (selectedQuestionIdsList != null && selectedQuestionIdsList.Any())
{
    <div class="mt-4">
        <h5>Total Questions Selected: @selectedQuestionIdsList.Count</h5>
        <div class="form-group">
            <label for="testName">Test Name:</label>
            <input type="text" id="testName" class="form-control" @bind="testName" />
        </div>
        <button type="button" @onclick="GenerateTestAsync" class="btn btn-primary">Generate Test</button>
    </div>
}
else
{
    <div class="alert alert-warning mt-4" role="alert">
        No questions selected.
    </div>
}

@code {
    private string testName;
    private string hyperLink = "";
    private List<int> selectedQuestionIdsList = new List<int>();

    [Parameter]
    public string selectedQuestionIds { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            if (!string.IsNullOrEmpty(selectedQuestionIds))
            {
                var ids = selectedQuestionIds.Split(",", StringSplitOptions.RemoveEmptyEntries);
                foreach (var id in ids)
                {
                    if (int.TryParse(id, out int parseId))
                    {
                        selectedQuestionIdsList.Add(parseId);
                    }
                    else
                    {
                        Console.WriteLine("INVALID ID");
                    }
                }
                // selectedQuestionIdsList = selectedQuestionIds.Split(',')
                //     .Select(id => int.Parse(id))
                //     .ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.InnerException);

        }

    }

    private async Task GenerateTestAsync()
    {
        if (string.IsNullOrEmpty(testName))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter a test name.");
            return;
        }

        var request = new GenerateTestRequest
            {
                TestName = testName,
                QuestionIds = selectedQuestionIdsList,
                Hyperlinks = hyperLink

            };

        try
        {
            var response = await Http.PostAsJsonAsync("test/GenerateTest", request);

            if (response.IsSuccessStatusCode)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Test generated successfully!");
                Navigation.NavigateTo("/view"); // Navigate back to view page
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JsRuntime.InvokeVoidAsync("alert", $"Error generating test: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }
}
