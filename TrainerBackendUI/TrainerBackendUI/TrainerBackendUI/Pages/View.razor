@page "/view"
@inject NavigationManager navigator;
@inject QuestionBankUI.Trainer.Services.QuestionUIService service;
@using Microsoft.JSInterop
@using QuestionBankDll.Trainer.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JsRuntime
<div class="container mt-4">
    <h2 class="text-center">Question List</h2>

    @if (questions != null && questions.Any())
    {
        @foreach (var subjectGroup in questions.GroupBy(q => q.Subject))
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h4>@subjectGroup.Key</h4>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="topicSelect">Select Topic:</label>
                        <select id="topicSelect" class="form-control" @onchange="(e) => OnTopicSelected(subjectGroup.Key, e.Value.ToString())">
                            <option value="">-- Select Topic --</option>
                            @foreach (var topic in subjectGroup.Select(q => q.Topic).Distinct())
                            {
                                <option value="@topic">@topic</option>
                            }
                        </select>
                    </div>

                    @if (selectedTopics.TryGetValue(subjectGroup.Key, out var selectedTopic) && selectedTopic != null)
                    {
                        <div class="form-group mt-3">
                            <label for="difficultySelect">Select Difficulty Level:</label>
                            <select id="difficultySelect" class="form-control" @onchange="(e) => OnDifficultyLevelSelected(subjectGroup.Key, selectedTopic, e.Value.ToString())">
                                <option value="">-- Select Difficulty Level --</option>
                                @foreach (var difficulty in subjectGroup.Where(q => q.Topic == selectedTopic).Select(q => q.DifficultyLevel).Distinct())
                                {
                                    <option value="@difficulty">@difficulty</option>
                                }
                            </select>
                        </div>

                        @if (selectedDifficultyLevels.TryGetValue(subjectGroup.Key, out var selectedDifficulty) && selectedDifficulty != null)
                        {
                            <ul class="list-group mt-4">
                                @foreach (var question in subjectGroup.Where(q => q.Topic == selectedTopic && q.DifficultyLevel == selectedDifficulty))
                                {
                                    <li class="list-group-item">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="question-@question.QuestionId" @onchange="(e) => OnQuestionSelected(e, question.QuestionId)" />
                                            <label class="form-check-label" for="question-@question.QuestionId">
                                                @RenderContent(question.QuestionText)
                                            </label>
                                        </div>

                                        @if (selectedQuestionIds.Contains(question.QuestionId))
                                        {
                                            <div class="mt-2">
                                                <small><strong>Options:</strong></small>
                                                <ul>
                                                    <li>A: @RenderContent(question.OptionA)</li>
                                                    <li>B: @RenderContent(question.OptionB)</li>
                                                    <li>C: @RenderContent(question.OptionC)</li>
                                                    <li>D: @RenderContent(question.OptionD)</li>
                                                </ul>
                                                <div><strong>Correct Answer:</strong> @RenderContent(question.CorrectAnswer)</div>
                                                <div><strong>Explanation:</strong> @RenderContent(question.Explaination)</div>
                                            </div>
                                            <button class="btn btn-primary p-2 m-2" @onclick="() => UpdatePage(question.QuestionId)">Update</button>
                                            <button class="btn btn-danger p-2 m-2" @onclick="() => DeleteQuestion(question.QuestionId)">Delete</button>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                    }
                </div>
            </div>
        }

        <div class="mt-4">
            <h5>Total Questions Selected: @selectedQuestionIds.Count</h5>

            <button type="button" @onclick="DownloadPdf" class="btn btn-outline-info m-2 p-2">Download PDF</button>
            <button type="button" @onclick="GenerateTest" class="btn btn-outline-info m-2 p-2">Generate Test</button>

        </div>
    }
    else if (isLoading)
    {
        <div class="text-center mt-4">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p>Loading questions...</p>
        </div>
    }
    else
    {
        <div class="alert alert-warning mt-4" role="alert">
            No questions available.
        </div>
    }
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private List<Question> questions;
    private Dictionary<string, string> selectedTopics = new Dictionary<string, string>();
    private Dictionary<string, string> selectedDifficultyLevels = new Dictionary<string, string>();
    private List<int> selectedQuestionIds = new List<int>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            questions = await Http.GetFromJsonAsync<List<Question>>("GetAllQuestions");
        }
        catch (Exception ex)
        {
            // Handle error (log it, show message, etc.)
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnTopicSelected(string subject, string topic)
    {
        selectedTopics[subject] = topic;
        selectedDifficultyLevels[subject] = null; // Reset the selected difficulty level
    }

    private void OnDifficultyLevelSelected(string subject, string topic, string difficultyLevel)
    {
        selectedDifficultyLevels[subject] = difficultyLevel;
    }

    private void OnQuestionSelected(ChangeEventArgs e, int questionId)
    {
        if ((bool)e.Value)
        {
            if (!selectedQuestionIds.Contains(questionId))
            {
                selectedQuestionIds.Add(questionId);
            }
        }
        else
        {
            selectedQuestionIds.Remove(questionId);
        }
    }

    private void UpdatePage(int id)
    {
        navigator.NavigateTo($"/update/{id}");
    }

    private async void DeleteQuestion(int id)
    {
        
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await service.DeleteQuestionAsync(id);
        }
        navigator.Refresh();

    }

    private RenderFragment RenderContent(string content) => builder =>
    {
        if (content.StartsWith("/Images/"))
        {
            builder.OpenElement(0, "img");
            builder.AddAttribute(1, "src", content);
            builder.AddAttribute(2, "alt", "Image");
            builder.AddAttribute(3, "class", "img-fluid");
            builder.CloseElement();
        }
        else
        {
            builder.AddContent(4, content);
        }
    };
    private async void DownloadPdf()
    {
        var response = await Http.PostAsJsonAsync("generate-pdf", selectedQuestionIds);
        // response.EnsureSuccessStatusCode();
        if (response.IsSuccessStatusCode)
        {
            var pdfName = "QuestionPaper.pdf";
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            //var fileName = response.Content.Headers.ContentDisposition?.FileName ?? pdfName;
            await JsRuntime.InvokeVoidAsync("saveAsFile", pdfName, "application/pdf", fileBytes);
        }
        else
        {
            Console.WriteLine("File not found");
        }
    }
    private void GenerateTest()
    {
        if (selectedQuestionIds != null && selectedQuestionIds.Any())
        {
            var ids = string.Join(",", selectedQuestionIds);
            navigator.NavigateTo($"/testAdd/selectedQuestionIds={ids}");
        }
    }
}

