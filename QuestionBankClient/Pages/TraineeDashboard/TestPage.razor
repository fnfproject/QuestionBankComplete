@page "/test/{testHyperlink}/{userId:int}"
@using TraineeBackendDll.Dtos
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container">
    <h2 class="text-center my-4">Test Questions</h2>

    <div class="card mb-4" style="width: 100%;">
        <div class="card-body">
            @if (testDetails != null && !isSubmitted)
            {
                <h3>@testDetails.TestName</h3>
                <EditForm Model="testSubmission" OnValidSubmit="SubmitTest">
                    @foreach (var question in testDetails.ModelTestQuestions)
                    {
                        <div class="mb-4">
                            <h5>@question.QuestionText</h5>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="optionA_@question.QuestionId" name="question_@question.QuestionId" value="@question.OptionA" @onchange="@(args => SelectAnswer(question.QuestionId, question.OptionA))" />
                                <label class="form-check-label" for="optionA_@question.QuestionId">@question.OptionA</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="optionB_@question.QuestionId" name="question_@question.QuestionId" value="@question.OptionB" @onchange="@(args => SelectAnswer(question.QuestionId, question.OptionB))" />
                                <label class="form-check-label" for="optionB_@question.QuestionId">@question.OptionB</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="optionC_@question.QuestionId" name="question_@question.QuestionId" value="@question.OptionC" @onchange="@(args => SelectAnswer(question.QuestionId, question.OptionC))" />
                                <label class="form-check-label" for="optionC_@question.QuestionId">@question.OptionC</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="optionD_@question.QuestionId" name="question_@question.QuestionId" value="@question.OptionD" @onchange="@(args => SelectAnswer(question.QuestionId, question.OptionD))" />
                                <label class="form-check-label" for="optionD_@question.QuestionId">@question.OptionD</label>
                            </div>
                        </div>
                    }
                    <button type="submit" class="btn btn-success">Submit Test</button>
                </EditForm>
            }

            else if (isSubmitted)
            {
                <h3>Test Result</h3>
                <p>Score: @resultDetails.Score</p>
                <p>Correct Answers: @resultDetails.NoOfRightAnswers</p>
                <p>Wrong Answers: @resultDetails.NoOfWrongAnswers</p>

                <h4>Answer Review:</h4>
                @foreach (var question in testDetails.ModelTestQuestions)
                {
                    <div>
                        <h5>@question.QuestionText</h5>
                        <p><strong>Your Answer:</strong> @selectedAnswers[question.QuestionId]</p>
                        <p><strong>Correct Answer:</strong> @question.CorrectAnswer</p>
                        <p><strong>Explanation:</strong> @question.Explaination</p>
                    </div>
                }

                <button class="btn btn-primary" @onclick="GoBackToDashboard">Go to Dashboard</button>
            }

            else
            {
                <p>Loading test...</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string testHyperlink { get; set; }
    [Parameter] 
    public int userId { get; set; }

    private TestDetailsDto testDetails;
    private TestSubmissionDto testSubmission = new TestSubmissionDto();
    private Dictionary<int, string> selectedAnswers = new Dictionary<int, string>();
    private bool isSubmitted = false;
    private ResultDto resultDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestData();
    }

    private async Task LoadTestData()
    {
        try
        {
            // Fetch the test details
            testDetails = await Http.GetFromJsonAsync<TestDetailsDto>($"http://localhost:5012/api/Trainer/test/{testHyperlink}");

            if (testDetails == null || testDetails.ModelTestQuestions == null)
            {
                Console.WriteLine("Error: Test details or questions are null.");
                return;
            }

            // Shuffle the questions
            testDetails.ModelTestQuestions = ShuffleList(testDetails.ModelTestQuestions);

            // Shuffle the options for each question
            foreach (var question in testDetails.ModelTestQuestions)
            {
                var shuffledOptions = ShuffleList(new List<string> { question.OptionA, question.OptionB, question.OptionC, question.OptionD });

                question.OptionA = shuffledOptions[0];
                question.OptionB = shuffledOptions[1];
                question.OptionC = shuffledOptions[2];
                question.OptionD = shuffledOptions[3];
            }

            // Set TestId in testSubmission
            testSubmission.TestId = testDetails.TestId;

            // Assume the UserId is available, e.g., from user session or passed as a parameter
            testSubmission.UserId = userId;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading test: {ex.Message}");
        }
    }

    private static List<T> ShuffleList<T>(List<T> list)
    {
        Random rng = new Random();
        return list.OrderBy(_ => rng.Next()).ToList();
    }

    private void SelectAnswer(int questionId, string option)
    {
        if (selectedAnswers.ContainsKey(questionId))
        {
            selectedAnswers[questionId] = option;
        }
        else
        {
            selectedAnswers.Add(questionId, option);
        }
    }

    private async Task SubmitTest()
    {
        // Map selectedAnswers dictionary to the list of QuestionSubmissionDto
        testSubmission.SelectedAnswers = selectedAnswers.Select(sa => new QuestionSubmissionDto
            {
                QuestionId = sa.Key,
                SelectedAnswer = sa.Value
            }).ToList();

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5136/api/Question/SubmitTest", testSubmission);
            if (response.IsSuccessStatusCode)
            {
                // Store the result data including correct answers and explanations
                resultDetails = await response.Content.ReadFromJsonAsync<ResultDto>();
                isSubmitted = true;

                // Map the correct answers and explanations to the questions
                foreach (var questionResult in resultDetails.QuestionResults)
                {
                    var question = testDetails.ModelTestQuestions.FirstOrDefault(q => q.QuestionId == questionResult.QuestionId);
                    if (question != null)
                    {
                        question.CorrectAnswer = questionResult.CorrectAnswer;
                        question.Explaination = questionResult.Explanation;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting test: {ex.Message}");
        }
    }


    private void GoBackToDashboard()
    {
        Navigation.NavigateTo($"/TraineeDashboard/{userId}");
    }
}

