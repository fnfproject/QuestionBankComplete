@page "/TraineeDashboard/{Id:int}"
@using TraineeBackendDll.Dtos
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h3 class="text-center mb-5">Trainee Dashboard</h3>

<div class="container-fluid">
    <div class="row">
        <!-- Main content: Tests and Results -->
        <div class="col-lg-8">
            <!-- Live Tests Section -->
            <h4 class="section-title">Live Tests</h4>
            <div class="row">
                @if (liveTests != null && liveTests.Any())
                {
                    @foreach (var test in liveTests)
                    {
                        var testAlreadyTaken = previousResults.Any(r => r.TestName == test.TestName);

                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm">
                                <div class="card-body">
                                    <h5 class="card-title">@test.TestName</h5>
                                    <p class="card-text">Max Marks: @test.TestMaxMarks | No. of Questions: @test.TestNoOfQuestions</p>
                                    <p class="card-text">
                                        Start Time: @test.StartTime.ToString("dd/MM/yyyy HH:mm")<br />
                                        Expiry Time: @test.ExpiryTime.ToString("dd/MM/yyyy HH:mm")
                                    </p>

                                    @if (IsTestStarted(test.StartTime))
                                    {
                                        @if (testAlreadyTaken)
                                        {
                                            <p class="text-danger">Test already taken.</p>
                                        }
                                        else
                                        {
                                            <button class="btn btn-success" @onclick="() => NavigateToTest(test.HyperLinks)">Start Test</button>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-warning">Test starts in @((test.StartTime - DateTime.Now).Hours) hours and @((test.StartTime - DateTime.Now).Minutes) minutes.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No live tests at the moment.</p>
                }
            </div>

            <!-- Expired Tests Section -->
            <h4 class="section-title">Expired Tests</h4>
            <div class="row">
                @if (expiredTests != null && expiredTests.Any())
                {
                    @foreach (var test in expiredTests)
                    {
                        <div class="col-md-6 mb-4">
                            <div class="card shadow-sm bg-light">
                                <div class="card-body">
                                    <h5 class="card-title">@test.TestName</h5>
                                    <p class="card-text">Max Marks: @test.TestMaxMarks | No. of Questions: @test.TestNoOfQuestions</p>
                                    <p class="card-text">
                                        Start Time: @test.StartTime.ToString("dd/MM/yyyy HH:mm")<br />
                                        Expiry Time: @test.ExpiryTime.ToString("dd/MM/yyyy HH:mm")
                                    </p>
                                    <button class="btn btn-secondary" disabled>Test Expired</button>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No expired tests available.</p>
                }
            </div>

            <!-- Previous Results Section -->
            <h4 class="section-title">Previous Test Results</h4>
            <div class="table-responsive">
                <table class="table table-hover table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th>Test Name</th>
                            <th>Score</th>
                            <th>Percentage</th>
                            <th>Date of Completion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (previousResults != null && previousResults.Any())
                        {
                            @foreach (var result in previousResults)
                            {
                                <tr class="table-row">
                                    <td>@result.TestName</td>
                                    <td>@result.Score</td>
                                    <td>@result.Percentage %</td>
                                    <td>@result.CreatedAt.ToShortDateString()</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center">No test results available.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Sidebar: Trainee Progress -->
        <div class="col-lg-4">
            <div class="card mb-4 shadow-lg">
                <div class="card-header bg-info text-white text-center">
                    <h4 class="mb-0">Trainee Progress</h4>
                </div>
                <div class="card-body d-flex justify-content-center align-items-center">
                    <div class="progress-circle" style="--progress:@progress;">
                        <div class="progress-circle-inner">
                            <span>@progress%</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Practice Papers -->
            <div class="card mb-4 shadow-lg">
                <div class="card-header bg-success text-white">
                    <h4 class="mb-0">Practice Papers</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @if (PracticePapers != null && PracticePapers.Any())
                    {
                        @foreach (var practicePaper in PracticePapers)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @practicePaper
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => DownloadPdf(practicePaper)">
                                    <i class="fa fa-download"></i> Download
                                </button>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="list-group-item">No practice papers available</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private List<TestDto> liveTests = new List<TestDto>();
    private List<TestDto> expiredTests = new List<TestDto>();
    private List<ResultDto> previousResults = new List<ResultDto>();
    private List<string> PracticePapers = new List<string>();
    private int progress = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            liveTests = await Http.GetFromJsonAsync<List<TestDto>>("http://localhost:5136/api/Question/LiveTests");
            expiredTests = await Http.GetFromJsonAsync<List<TestDto>>("http://localhost:5136/api/Question/ExpiredTests");
            previousResults = await Http.GetFromJsonAsync<List<ResultDto>>($"http://localhost:5136/api/Question/GetPreviousResults/{Id}");
            PracticePapers = await Http.GetFromJsonAsync<List<string>>("http://localhost:5012/api/Trainer/GetPracticePapers");

            if (previousResults.Any())
            {
                progress = (int)previousResults.Average(r => r.Percentage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tests: {ex.Message}");
        }
    }

    private bool IsTestStarted(DateTime startTime)
    {
        return startTime <= DateTime.Now;
    }

    private void NavigateToTest(string testHyperlink)
    {
        Navigation.NavigateTo($"/test/{testHyperlink}/{Id}");
    }

    private async Task DownloadPdf(string pdfName)
    {
        try
        {
            var response = await Http.GetAsync($"http://localhost:5012/api/Trainer/DownloadPracticePaper/{pdfName}");
            if (response.IsSuccessStatusCode)
            {
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                var fileName = response.Content.Headers.ContentDisposition?.FileName ?? pdfName;
                await JsRuntime.InvokeVoidAsync("saveAsFile", fileName, "application/pdf", fileBytes);
            }
            else
            {
                Console.WriteLine("File not found");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }

}

<style>
    .section-title {
        font-size: 1.5rem;
        color: #007bff;
        border-bottom: 2px solid #007bff;
        padding-bottom: 10px;
    }

    .animate-hover {
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .animate-hover:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

    .table-row:hover {
        background-color: #f8f9fa;
    }

    /* Progress circle */
    .progress-circle {
        width: 120px;
        height: 120px;
        background: conic-gradient(#007bff calc(var(--progress) * 1%), #e9ecef 0);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: bold;
    }

    .progress-circle-inner {
        width: 90px;
        height: 90px;
        border-radius: 50%;
        background-color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>
