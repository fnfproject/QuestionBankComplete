@page "/Traineelogin"
@inject HttpClient Http
@inject NavigationManager Navigation
@using QuestionBankApi.Trainee.Dtos

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="col-md-6">
        <div class="card shadow-lg border-0" style="border-radius: 1rem; animation: fadeIn 1.5s ease;">
            <div class="card-body">
                <h3 class="card-title text-center mb-4" style="color: #007bff;">
                    <i class="fas fa-user-circle"></i> Trainee Login
                </h3>

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="username" class="form-label">
                            <i class="fas fa-user"></i> Username:
                        </label>
                        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter your username" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i> Password:
                        </label>
                        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100" style="border-radius: 2rem;">
                        <i class="fas fa-sign-in-alt"></i> Login
                    </button>
                </EditForm>

                @if (!string.IsNullOrEmpty(loginMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @loginMessage
                    </div>
                }

                <div class="mt-3 text-center">
                    <p>Don't have an account?</p>
                    <button class="btn btn-secondary" @onclick="NavigateToRegister" style="border-radius: 2rem;">
                        <i class="fas fa-user-plus"></i> Register
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    private LoginDto loginModel = new LoginDto();
    private string loginMessage;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("api/Trainee/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponseDto>();

            if (result != null && !string.IsNullOrEmpty(result.Token))
            {
                // Redirect to the trainee dashboard, passing the user ID
                Navigation.NavigateTo($"/Traineedashboard/{result.Id}");
            }
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            loginMessage = "Invalid username or password. Please try again or register.";
        }
        else
        {
            loginMessage = "An error occurred. Please try again later.";
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/Traineeregister");
    }

    public class LoginDto
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}